/*
Credits to DBLmao & mapler for sharing the base script.
Credits to SouthernEmblem for updating the script.
Special thanks to the GameKiller team for making the GMS public bypass compatible with other versions of MS too.
If you are banned while using this, YOU are the one responsible.
Using a disposable account is advised, especially If the address you're editing is over 0x0293D3FF.

MSEAv173.1 MSCRC Bypass for mem-editing
*/

define(CRC1,033718FF)
define(CRC2,030D87AD)
define(CRC1START,00401000)
define(CRC1END,0293D3FF)  //Get via script
define(CRC2START,03350000)
define(CRC2END,03390000)  //Get via find out what addresses is accessed breakpoint
[ENABLE]
alloc(Hook,1024)
globalalloc(MemCopy,100663296)
label(MemCopier)
registersymbol(MemCopier)
label(Hook1)
label(Hook2)
label(Hook1End)
label(Hook2End)
label(Hook1Ret)
label(Hook2Ret)
label(Copy1)
label(Copy2)
label(CopyExit)
createthread(MemCopier)

///////////////////////////////////////////////////////////////////////////

MemCopy+5FFF000:
MemCopier:
cmp [MemCopier+200],1
je CopyExit
mov eax,CRC1START

Copy1:
mov ebx,[eax]
mov [MemCopy+eax],ebx
add eax, 4
cmp eax,CRC1END
jle Copy1
mov eax,CRC2START

Copy2:
mov ebx,[eax]
mov [MemCopy+eax],ebx
add eax, 4
cmp eax,CRC2END
jle Copy2

CopyExit:
mov eax,Hook1
sub eax,Hook1Ret
mov byte ptr [CRC1],E9
mov [CRC1+1],eax        //May need to add nop in future versions
mov [MemCopier+200],1
jmp terminatethread

///////////////////////////////////////////////////////////////////////////

Hook:
Hook1:
cmp ecx,CRC1START
jb Hook1End
cmp ecx,CRC1END
ja Hook1End
add ecx,MemCopy
jmp Hook1End

Hook2:
cmp eax,CRC2START
jb Hook2End
cmp eax,CRC2END
ja Hook2End
add eax,MemCopy
jmp Hook2End



Hook1End: //Original Opcodes
add al,[ecx]
mov ecx,[esp]
jmp Hook1Ret

Hook2End: //Original Opcodes
mov eax,[eax]
add [edx],eax
pushfd
jmp Hook2Ret


CRC1+5:       //May change depending on if nop is needed
Hook1Ret:

CRC2:
jmp Hook2
Hook2Ret:

///////////////////////////////////////////////////////////////////////////

[DISABLE]
CRC1: //Orginal opcodes
add al,[ecx]
mov ecx,[esp]

CRC2: //Orginal opcodes
mov eax,[eax]
add [edx],eax
pushfd

dealloc(Hook)
